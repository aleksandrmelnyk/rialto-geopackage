JSON Schema for WPS Interfaces to Ossim/Rialto Command Line Tools
=================================================================

* The JSON object will be a <rootmap>, as described below.

* All map keys are strings. All map values are strings unless noted otherwise.

* All map keys are optional, unless noted otherwise. If key not present,
  the value will be set to a default of "", 0, 0.0, false, or null,
  according to the value's expected datatype, unless otherwise
  specified.

* The WPS spec allows for a very rich scheme for describing parameters, but we
  are limited by the subset supported by GeoServer's WPS scripting service.


 
<root_map>
----------

{
    "name": <string>,           // name of the command line tool; required
    "description": <string>,
    "inputs": <params_map>,     // these are the command-line options
    "outputs": <params_map>,    // these are what the tool generates for outputs
    "enums": <enums_map>
}

The description string should contain the version numbers of the tool.



<params_map>
------------

{
    "<name_of_parameter>": {
        "type": <datatype_string>,              // required
        "description": <string>
    },
    "<name_of_parameter>": {
        ...
    },
    ...
}

All parameters are required to be present in the JSON file: none are optional,
which removes the need for expressing default values.

For inputs, the "name_of_parameter" key should correspond to the command line tool option
name. All options are expected to use the "--" switch syntax.

For outputs, the "name_of_parameter" information is not passed the command-line
tool. Rather, it is used by the client to understand what to expect and how
to interpret the results generated by the command-line tool because this may
not be expressed by the input parameters (i.e. command-line switches). For
example, the tool may produce an output file name with a randomly generated name.



<datatype_string>
-----------------

This is just a JSON <string> literal which must be one of the following:

    - "string"
    - "int"
    - "double"
    - "position"    // array of two doubles (lon,lat), default value: [0.0,0.0]
    - "bbox"        // an array of four doubles (minx, miny, maxx, maxy),
                    //   default value: [-180.0, -90.0, 180.0, 90.0]
    - "enum:NAME"   // see below
    - "file:raster"
    - "file:elevation"
    - "file:lidar"
    - "file:geopackage"
    - "file:text"

Note we distinguish filenames from plain strings, and we also indicate the type
of file that is being used. (We do not use the filename extension, as it is
ambiguous: a .tif could be a 3-band raster image or a 1-band elevation set).

If the datatype to "enum:NAME", then the value must be one of the strings in
the enum named "NAME", as described below.


<enums_map>
-----------

{
    "<name_of_enum>": [ "<value1>", "<value2>", ...],
    "<name_of_enum>": ...,
    ...
}



Example 1
---------

This describes a tool that takes no inputs and returns no outputs.

{
    "name": "noop"
}



Example 2
---------

This describes the current viewshed tool:

{
    "name": "ossim-viewshed",
    "inputs": {
        "observer": {
            "description": "observer",
            "datatype": "position"
        },
        "fovStart": {
            "description": "field of view, start value (in degrees)",
            "datatype": "double"
        }
        "fovEnd": {
            "description": "field of view, end value (in degress)",
            "datatype": "double"
        },
        "eyeHeight": {
            "description": "eye height (in meters)",
            "datatype": "double"
        },
        "radius": {
            "description": "radius (in meters)",
            "datatype": "double"
        },
        "inputDem": {
            "description": "input DEM file",
            "datatype": "file:elevation"
        },
        "outputFile": {
            "description": "output TIFF file",
            "datatype": "file:raster"
        }
    }
}



Example 3
---------

This shows the use of the "enum" datatype:

{
    "name": "color_tool",
    "description": "generate a small PNG of a solid color (v1.4)",
    "inputs": {
        "color": {
            "description": "color",
            "datatype": "enum:colors"
        },
        "outfile": {
            "description": "output PNG file",
            "datatype": "file:raster"
        }
    },
    "enums": {
        "colors": ["red", "green", "blue"]
    }
}



Example 4
---------

This shows the use of (and need for) output parameters.

{
    "name": "wms_loader",
    "description": "loads the given file into the WMS server in the cluster with the most free disk space",
    "inputs": {
        "file": {
            "datatype": "file:raster",
            "description": "the file to be ingested"
        }
    },
    "outputs": {
        "url_endpoint": {
            "datatype": "url:wms",
            "description": "The URL of the WMS server where the file is now accessible"
        },
        "errors": {
            "datatype": "string",
            "description": "any errors produced by the ingest process; may be the empty string"
        }
    }
}
