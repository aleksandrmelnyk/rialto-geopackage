JSON Schema for WPS Interfaces to Ossim/Rialto Command Line Tools
=================================================================

* The JSON object will be a <rootmap>, as described below.

* All map keys are strings. All map values are strings unless noted otherwise.

* All map keys are optional, unless noted otherwise. If key not present,
  the value will be set to a default of "", 0, 0.0, false, or null,
  according to the value's expected datatype, unless otherwise
  specified.

* The WPS spec allows for a very rich scheme for describing parameters, but we
  are limited by the subset supported by GeoServer's WPS scripting service.


 
<root_map>
----------

{
    "name": <string>,           // name of the command line tool; required
    "description": <string>,    // optional
    "inputs": <params_map>,     // required
    "outputs": <params_map>,     // required
    "enums": <enums_map>        // optional
}

The description string should contain the version numbers of the tool.



Inputs
------

The "inputs" element is a map whose keys are the option names. All options
are assumed to be prefixed with "--".



Outputs
-------

If the ossim tool generates an output, that can be returned using the "outputs"
map. In the stdout from the run of the tool, WPS will scan for output names.

For example, if the ossim tool's JSON description contained this:

    ...
    "outputs": {
        "url": {
            "datatype": "url:wms",
            "description": "The URL of the WMS server where the file is now accessible"
        }
    }
    ...

and then the tool printed this to stdout during the run:

    working...
    working...
    done!
    [url] http://example.com/foo
    exiting with status 0

then WPS will return to the calling client an output parameter named "url"
with the value "http://example.com/foo".



<params_map>
------------

{
    "<name_of_parameter>": {                    // optional
        "type": <datatype_string>,              // required
        "description": <string>,
        "result": bool                          // defaults to false
    },
    "<name_of_parameter>": {
        ...
    },
    ...
}

All parameters are "required" to be provided by the calling WPS process. (Having
no optional parameters allows us to avoid the problem of supplying defaults.)

Only the "type" key is required.All parameters are required to be present in the JSON file: none are optional,
which removes the need for expressing default values.

The "name_of_parameter" key should correspond to the command line tool option
name. All options are expected to use the "--" switch syntax.

The "result" key should be set to true for any parameter representing something that
the script creates as an output. Note that any such output parameter must be
a filename datatype: that's the only kind of thing that the CL tools produce.



<datatype_string>
-----------------

This is just a JSON <string> literal which must be one of the following:

    - "string"
    - "int"
    - "double"
    - "geographic-2d"   // string with array of two doubles: (lon, lat)
    - "geographic-3d"   // string with array of three doubles: (lon, lat, hgt)
    - "xy"              // string with array of two doubles: (min, max) or (start, end) or (x, y)
    - "xyz"             // string with an array of three doubles: (x, y, z)
    - "bbox"    // string with an array of four doubles: (minx, miny, maxx, maxy)
    - "enum:NAME"   // see below
    - "file:raster"
    - "file:elevation"
    - "file:lidar"
    - "file:geopackage"
    - "file:text"

Note we distinguish filenames from plain strings, and we also indicate the type
of file that is being used. (We do not use the filename extension, as it is
ambiguous: a .tif could be a 3-band raster image or a 1-band elevation set).

If the datatype to "enum:NAME", then the value must be one of the strings in
the enum named "NAME", as described below.

*NOTE:* The non-native data types (position, file:*, etc) are just treated as
strings for now.



<enums_map>
-----------

{
    "<name_of_enum>": [ "<value1>", "<value2>", ...],
    "<name_of_enum>": ...,
    ...
}



Examples
--------

See the files in the `examples/` directory:

* example01: a tool that takes no inputs and returns no outputs
* example02: the current viewshed tool
* example03: shows the use of the "enum" datatype
* example04: shows the use of (and need for) output parameters
